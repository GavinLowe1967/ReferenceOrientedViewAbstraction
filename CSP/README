Lock-based stack
================

Not using three-way synchronisations:

lockBasedStack0.csp: correct version of the lock-based stack, not using
three-way synchronisations.  286 abstractions.

lockBasedStack0Err1.csp: version where pop does not obtain lock.  Finds error. 

lockBasedStack0Err2.csp: version where push does not obtain lock.  Finds error.

lockBasedStackOmit.csp: version where Nodes referenced by "next" reference are
omitted from Views.  Finds error.

With three-way synchronisations:

lockBasedStack.csp: correct version with three-way synchronisation.  274 -> 302
abstractions.

lockBasedStackErr1.csp:  version where pop does not obtain lock.  Finds error.

lockBasedStackErr2.csp:  version where push does not obtain lock.  Finds error.

lockBasedStackKeep.csp: version that gives an error, I think because of too
few synchronisations with the watchdog.

Lock-based queue
================

lockBasedQueue.csp: involves two synchronisations between thread and watchdog
on each of enqueueing and dequeueing.  Also artificially keeps the tail
node in an enqueueing thread's state. 556 abstractions 

lockBasedQueueOmit.csp: version where Nodes referenced by "next" reference are
omitted from Views.  Finds error.


Treiber Stack
=============

TreiberStack.csp: make node synchronise on the joining CAS.  1,653 states,
~3s.

TreiberStackOmitCreator.csp: for newly created nodes, store the identity of
the creating thread, but don't include that thread in views.  1,026 states
~2.5s.

TreiberStackOmitNext.csp: Nodes referenced by "next" reference are omitted
from Views.  Finds error.

TreiberStack2.csp: 2,780 states, ~7 sec.  This has a POR to force joined
events immediately after the corresponding CAS.

TreiberStack0.csp: finds a false positive.  It's not capturing the invariant
that at most one thread has created a new node.

TreiberStack1.csp: this works, but is less efficient, as it doesn't have the
POR.  7408 states, ~28 sec (with profiling)

Lock-Free Queue
===============

lockFreeQueue.csp: 2272 states, ~7 s (about half compilation). 

Lazy Set
========

lazySet.csp: Each node has reference to locking thread.  Finds false error on
step 29, 31,364 abstractions.  There seem to be two nodes containing B.  Added
BTracker.

lazySet0.csp: Merging states produces a concretization where *two* threads are
in the state AddTest (or thereabouts), with the same next and current
references.  This state is not reachable in concrete models, because not both
threads can have these nodes locked.

lazySetBug.csp: this seems to display a bug in FDR.  When a node is locked, it
ought to store the identity of the locking thread, but doesn't.

lazySet1.csp: version where nodes do not have prev references

Test files
==========

test-file.csp: file used for the unit tests.  125 states
