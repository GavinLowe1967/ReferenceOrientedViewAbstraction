Lock-based stack
================

lockBasedStack.csp: correct version with three-way synchronisation.  274 -> 302
abstractions.

lockBasedStackErr1.csp:  version where pop does not obtain lock.  Finds error.

lockBasedStackErr2.csp:  version where push does not obtain lock.  Finds error.

lockBasedStackOmitNext.csp: version where Nodes referenced by "next" reference
are omitted from Views.  Finds error.


Lock-based queue
================

lockBasedQueue.csp: involves two synchronisations between thread and watchdog
on each of enqueueing and dequeueing.  Also artificially keeps the tail
node in an enqueueing thread's state. 556 abstractions 

lockBasedQueue1.csp: variant where the "setTail" state in Enqueue does not
hold a reference to the tail node.  This finds a false error (both with and
without --singleRef).

lockBasedQueueNextOmit.csp: version where Nodes referenced by "next" reference
are omitted from Views.  Finds error.


Treiber Stack
=============

TreiberStack.csp: make node synchronise on the joining CAS.  1,653 states,
~3s.

TreiberStackOmitCreator.csp: for newly created nodes, store the identity of
the creating thread, but don't include that thread in views.  1,026 states
~2.5s.  Now 1,125 states.  883 with singleRef

TreiberStackOmitNext.csp: Nodes referenced by "next" reference are omitted
from Views.  Finds error.


Lock-Free Queue
===============

lockFreeQueue.csp: 2272 states, ~7 s (about half compilation). 

lockFreeQueueOmitNext.csp.  Omits views based on next references.  Finds false
errors.

Lazy Set
========

lazySetNoDel.csp: a version with no deletion

lazySetNoJoined.csp: the standard version, without joined events.

lazySetOmit.csp: same as previous, but omitting views based on prev and locker
fields.


Lock-Free Set
=============

lockFreeSet.csp: Basic model.  Doesn't record prev references.  Finds error.

lockFreeSetPrevRefs.csp: Nodes have prev references.  Finds false error on
step 38 caused by threads helping to decouple marked nodes.

lockFreeSetNoHelping.csp: Has such helping disabled.  Succeeds!  11,289,521
abstractions, 154 mins.

*** I think lockFreeSet, lockFreeSetNoHelping have a bug: DelSnip1 does a
    setPrev with the wrong value.

lockFreeSet2: tries to ensure states doing a helping decouple store the value
of the succ node.  Finds false error during STEP 39, #abstractions =
12,921,120.

lockFreeSet3: does similar for states decoupling a node they marked for
deletion.  Reaches at least STEP 41, #abstractions = 12,130,519.




Test files
==========

test-file.csp: file used for the unit tests.  125 states

============================================== OLD

lockBasedStack0.csp: correct version of the lock-based stack, not using
three-way synchronisations.  286 abstractions.

lockBasedStack0Err1.csp: version where pop does not obtain lock.  Finds error. 

lockBasedStack0Err2.csp: version where push does not obtain lock.  Finds error.

lockBasedStackKeep.csp: version that gives an error, I think because of too
few synchronisations with the watchdog.

TreiberStack2.csp: 2,780 states, ~7 sec.  This has a POR to force joined
events immediately after the corresponding CAS.

TreiberStack0.csp: finds a false positive.  It's not capturing the invariant
that at most one thread has created a new node.

TreiberStack1.csp: this works, but is less efficient, as it doesn't have the
POR.  7408 states, ~28 sec (with profiling)

TreiberStackSingleRef.csp: file designed to work wth the --singleRef option.
Contains a fixed component that tracks the B node (if any).  Without this, we
can obtain the following two views:
- A view containing a popping thread T0 with a reference to the top node N0
  (containing B), and an omitted reference to the second node N1 (presumably
  containing A).
- A view containing a popping thread T0, with an omitted reference to N1
  (presumably contaiing C here), and a reference to the next node N2
  (containing B).
There two views are compatible.  But from there merger, T0 can pop B, and then
T1 can pop C, giving a false error.

lazySetCasteret.csp: POR doesn't force unlockSetPrev immediately after joined

lazySetY.csp: incorrect version, with incorrect assumption made about nodes:
that they can't be unlocked once decoupled.  Error found on ply 36, ~260K
abstractions.

lazySetZ.csp: similar to above, but with process to force error trace. 

--------

lazySet3.csp: Each node has reference to locking thread.  Finds false error on
step 29, 31,364 abstractions.  There seem to be two nodes containing B.  Added
BTracker.

lazySet0.csp: Merging states produces a concretization where *two* threads are
in the state AddTest (or thereabouts), with the same next and current
references.  This state is not reachable in concrete models, because not both
threads can have these nodes locked.

lazySetBug.csp: this seems to display a bug in FDR.  When a node is locked, it
ought to store the identity of the locking thread, but doesn't.

lazySet1.csp: version where nodes do not have prev references