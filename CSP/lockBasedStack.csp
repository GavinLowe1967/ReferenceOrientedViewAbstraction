-- @VA component process = FreeNode
-- @VA component alphabet = alphaNode
-- @VA component identity type = NodeID
-- @VA component active = false
-- @VA component process = Thread
-- @VA component alphabet = alphaThread
-- @VA component identity type = ThreadID
-- @VA component active = true
-- @VA serversRename = ServerSet
-- synchronisation set = SyncSet

-- A model of a lock-based stack, corresponding to the following pseudocode.

-- This version has the watchdog synchronising with the thread when the node
-- is initiailised, and also on the setTop event, which aims to ensure all
-- nodes satisfy the expected invariant.

-- class Node(x: D, next: Node)
-- var Top: Node = null; val Lock = new Lock
-- def Push(x: D) = {
--   Lock.lock; val top = Top; val n = new Node(x, top); 
--   top = n; Lock.unlock
-- }
-- def Pop: D = {
--   Lock.lock; val top = Top
--   if(top == null){ Lock.unlock; return Empty }
--   else{ val n = top.next; Top = n; val x = n.x; 
--         Lock.unlock; return x }
-- }

include "definitions.csp"

-------- Basic types
-- the type of nodes; the former is for use with FDR; the latter with the
-- view abstraction program.
datatype NodeIDType =  Null | N0 | N1 | N2 | N3 | N4 | N5 | N6 
NodeID =  diff(NodeIDType, {Null})             -- real nodes
datatype Data = A | B | C                      -- the type of data
datatype ThreadID = T0 | T1 | T2               -- the type of thread IDs

------------------------ Nodes ----------------------

channel initNode : ThreadID.NodeID.Data.NodeIDType -- initialise a node
channel getDatum : ThreadID.NodeID.Data -- read data from a node
channel getNext : ThreadID.NodeID.NodeIDType -- read next reference from a node

-- A single node with identity me, initially free
FreeNode(me) = initNode?t!me?datum?next -> Node(me, datum, next)

-- A node holding datum with reference to next
Node(me, datum, next) = 
  getDatum?t!me!datum -> Node(me, datum, next)
  [] getNext?t!me!next -> Node(me, datum, next)

alphaNode(n) =
  {| initNode.t.n, getDatum.t.n, getNext.t.n | t <- ThreadID |}

Nodes = || n <- NodeID @ [alphaNode(n)] FreeNode(n)

---------------------- Servers ----------------------

-------- Variable storing the value of the top node

channel getTop : ThreadID.NodeIDType -- get the top pointer

-- Setting the top pointer is the LP for the relevant operation, as indicated
-- by a signal of the following type.

datatype Signal = PushOp.Data | PopOp.Data

channel setTop : ThreadID.NodeIDType.Signal

Top(top) = getTop?t!top -> Top(top) [] setTop?t?top1?_ -> Top(top1) 

alphaTop = {| getTop, setTop |}

-------- A lock process
channel lock, unlock : ThreadID
Lock = lock?t -> unlock.t -> Lock

alphaLock = {| lock, unlock |}

-------- Threads
channel popEmpty : ThreadID         -- Signal operation

Pop(me) =
  lock.me ->  
  getTop.me?top ->
  if top != Null then
    getNext.me.top?next -> getDatum.me.top?d -> 
    setTop.me.next.PopOp.d -> Unlock(me)
  else popEmpty.me -> Unlock(me)

Unlock(me) = unlock.me -> Thread(me)

Push(me) =
  lock.me -> getTop.me?top -> initNode.me?node?v!top -> 
  setTop.me.node.PushOp.v -> Unlock(me)

Thread(me) = Push(me) [] Pop(me)

alphaThread(t) =
  {| initNode.t, getDatum.t, getNext.t, getTop.t, setTop.t, 
     lock.t, unlock.t, popEmpty.t |}

Threads = ||| t <- ThreadID @ Thread(t) 

-------- Watchdog.  Ensure that, once B is pushed: B is popped before A; that
-- B is popped only once; and that the stack is not empty before B is popped.

channel error

-- push1 events represent an initNode event, with the thread choosing a data
-- value to push.  push2 events represent the value being added to the stack
-- via a setTop event.

channel push1, push2, pop : Data

WD0 =
  push1!A -> push2!A -> WD0
  [] push1!B -> push2!B -> WD1
  [] pop?x -> (if x==A then WD0 else WDErr)
  [] popEmpty?_ -> WD0

-- Pushes from A*BC*; B not yet popped; expect more pushes of C; allow pops of
-- B or C.

WD1 =
  push1!C -> push2!C -> WD1
  [] pop?x -> (if x==A then WDErr else if x==B then WD2 else WD1)
  [] popEmpty?_ -> WDErr

-- Pushes from A*BC*, B popped; expect more pushes of A; allow pops of A 
-- or empty.

WD2 =
  push1!A -> push2!A -> WD2
  [] pop?x -> (if x==A then WD2 else WDErr)
  [] popEmpty?_ -> WD2

-- Signal error

WDErr = error -> STOP

WDRename = Union({
  {(push1.v, initNode.t.n.v.nxt) | 
     v <- Data, t <- ThreadID, n <- NodeID, nxt <- NodeIDType},
  {(push2.v, setTop.t.n.PushOp.v) | v <- Data, t <- ThreadID, n <- NodeID},
  {(pop.v, setTop.t.n.PopOp.v) | v <- Data, t <- ThreadID, n <- NodeIDType}
})

alphaWatchdog = {| popEmpty, error, initNode, setTop |}

-------- Put servers together
ServerSet :: <(Proc, <(Event,Event)>, {Event}, Bool)>
ServerSet = 
  < (Lock, <>, alphaLock, false), (Top(Null), <>, alphaTop, false), 
    (WD0, seq(WDRename), alphaWatchdog, false) >

-- Checks using FDR directly

Servers = 
  || (S, R, Alpha, _) <- set(ServerSet) @ 
       [Alpha] S[[ e1 <- e2 | (e1,e2) <- set(R) ]]

SyncSet = {| setTop, getTop, lock, unlock, popEmpty, initNode |}  

Components = (Nodes [| {| initNode,getNext,getDatum |} |] Threads)

System = Components [| SyncSet |] Servers
	 
-- Watchdog-based specification

assert STOP [T= System \ diff(Events, {error})

assert System :[deadlock free]

assert System :[has trace [T]]: < 
  lock.T0, getTop.T0.Null, initNode.T0.N0.A.Null, 
  setTop.T0.N0.PushOp.A, unlock.T0,
  lock.T1, getTop.T1.N0, getNext.T1.N0.Null, unlock.T1 
>

assert STOP [T= STOP :[symmetry reduce]: 