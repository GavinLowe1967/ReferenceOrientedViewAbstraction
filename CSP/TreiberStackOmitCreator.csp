-- @VA component process = FreeNode
-- @VA component alphabet = alphaNode
-- @VA component identity type = NodeID
-- @VA component active = false
-- @VA component process = Thread
-- @VA component alphabet = alphaThread
-- @VA component identity type = ThreadID
-- @VA component active = true
-- @VA serversRename = ServerSet
-- @VA omitInfo = omit t from InitNode(me: NodeID, t: ThreadID, datum: T, next: NodeID)

include "definitions.csp"

-- A model of the Treiber Stack, corresponding to the following pseudocode.

-- class Node(x: D, next: Node)
-- var Top: Node = null
-- def Push(x: D) = {
--   val node = new Node(x, null)
--   while(true){
--     val top = Top.get; node.next = top
--     if(Top.CAS(top, node)) return
--   }
-- }
-- def Pop: D = {
--   val top = Top.get
--   if(top == Null) return Empty
--   else{ 
--     val next = top.next; val value = top.value
--     if(Top.CAS(top, next)) return value else Pop
--   }
-- }

-- Identities of nodes
datatype NodeIDType = Null | N0 | N1 | N2 | N3 | N4
NodeID =  diff(NodeIDType, {Null})               -- real nodes

-- Data values
datatype T = A | B | C

-- Thread identities
datatype ThreadID = T0 | T1 

-- initialise node to hold value
channel initNode : ThreadID . NodeID . T

-- get the value field
channel getValue : ThreadID . NodeID . T

-- get the next field
channel getNext : ThreadID . NodeID . NodeIDType

-- set the next field
channel setNext: ThreadID . NodeID . NodeIDType

-- Signal to node that it has been added
-- channel joined: ThreadID . NodeID

-- A node process, with identity me, currently free
-- With the following, a false error is found, where two threads are confused 
-- about which created a node.
-- FreeNode :: (NodeIDType) -> Proc
-- FreeNode(me) = 
--   initNode?t!me?value -> setNext.t.me?next -> InitNode(me, value, next)

-- InitNode(me, value, next) =  
--   -- Observe the CAS that adds this node
--   CASTop?t?_!me.true.PushOp.value -> Node(me, value, next)
--   []
--   setNext?t!me?next' -> InitNode(me, value, next')

FreeNode(me) = 
  initNode?t!me?value -> setNext.t.me?next -> InitNode(me, t, value, next)

InitNode(me, t, value, next) =  
  -- Observe the CAS that adds this node
  CASTop.t?_!me.true.PushOp.value -> Node(me, value, next)
  []
  setNext.t.me?next' -> InitNode(me, t, value, next')

-- A node process, identity me, holding datum value and next pointer next
Node :: (NodeIDType, T, NodeIDType) -> Proc
Node(me, value, next) = 
  getValue?_!me.value -> Node(me, value, next)
  []
  getNext?_!me.next -> Node(me, value, next)
  []
  setNext?_!me?newNext -> Node(me, value, newNext)

alphaNode(me) = Union({
  {| initNode.t.me, getValue.t.me, getNext.t.me, setNext.t.me | 
       t <- ThreadID |},
  {| CASTop.t.top.me.true.PushOp.value | 
       t <- ThreadID, top <- NodeIDType, value <- T |}
})

AllNodes = || id : NodeID @ [alphaNode(id)] FreeNode(id)

alphaNodes = Union({ alphaNode(n) | n <- NodeID })

-------- A pushing thread

Push(me, value) = initNode.me?node!value -> Push'(me, value, node)

Push'(me, value, node) =
  getTop.me?top -> setNext.me.node.top ->
  CASTop.me.top.node?result!PushOp!value -> -- lin point for push of value
  if result then Thread(me) else Push'(me, value, node)

-------- A popping thread

Pop(me) =
  getTop.me?top -> -- lin point if top = Null
  if top == Null then Thread(me)
  else
    getNext.me.top?next -> getValue.me.top?value ->
    CASTop.me.top.next?result!PopOp!value -> -- lin point for pop if successful
    if result then Thread(me) else Pop(me)

-------- A thread

Thread(me) = ([] v : T @ Push(me, v)) [] Pop(me)

alphaThread(me) =
  union(
    {| setNext.me.n, initNode.me.n, getValue.me.n, getNext.me.n | n <- NodeID |},
    {| getTop.me, CASTop.me |}
  )
  
AllThreads = ||| id : ThreadID @ Thread(id)

-------- The top variable

-- Get the node referred to by top. 
channel getTop: ThreadID . NodeIDType

-- A CAS of the top pointer.  The T value represents the value being pushed or
-- popped; the penultimate field represents the operation being performed.

datatype Op = PushOp | PopOp

channel CASTop: ThreadID . NodeIDType . NodeIDType . Bool . Op . T

Top = Top1(Null)

Top1(top) =
  getTop?t!top -> Top1(top)
  []
  CASTop?t?expected?new!(expected==top)?_?_ ->
    (if expected==top then Top1(new) else Top1(top))

alphaTop = {| getTop, CASTop |}

-------- The watchdog.

-- Consider only pushes from A*BC*A*, with the transition from C* to A*
-- happening when the B is popped.  Then after a B is pushed, an A should not
-- be popped before the B, and a pop should not fail before the B is popped;
-- and after the B is popped, only As should be popped.

-- Pushes and pops from A* so far; expect pushes of A or B; allow pops of A or
-- empty.

channel push, pop : T
channel popEmpty
channel error

WD0 =
  push.A -> WD0
  [] push.B -> WD1
  [] pop?x -> (if x==A then WD0 else WDErr)
  [] popEmpty -> WD0

-- Pushes from A*BC*; B not yet popped; expect more pushes of C; allow pops of
-- B or C.

WD1 =
  push.C -> WD1
  [] pop?x -> (if x==A then WDErr else if x==B then WD2 else WD1)
  [] popEmpty -> WDErr

-- Pushes from A*BC*, B popped; expect more pushes of A; allow pops of A 
-- or empty.

WD2 =
  push.A -> WD2
  [] pop?x -> (if x==A then WD2 else WDErr)
  [] popEmpty -> WD2

-- Pushes not from A*BC* seen; block subsequent events

-- WDAny = STOP

-- Signal error

WDErr = error -> STOP

WDRename = Union({
  { (push.x, CASTop.t.n1.n2.true.PushOp.x) |
      t <- ThreadID, n1 <- NodeIDType, n2 <- NodeIDType, x <- T },
  { (pop.x, CASTop.t.n1.n2.true.PopOp.x) |
      t <- ThreadID, n1 <- NodeIDType, n2 <- NodeIDType, x <- T },
  { (popEmpty, getTop.t.Null) | t <- ThreadID }
})

WatchDog = WD0[[ e1 <- e2 | (e1,e2) <- WDRename ]]

-- [[ push.x <- CASTop.t.n1.n2.true.PushOp.x |
     --      t <- ThreadID, n1 <- NodeIDType, n2 <- NodeIDType, x <- T ]]
     -- [[ pop.x <- CASTop.t.n1.n2.true.PopOp.x |
     --      t <- ThreadID, n1 <- NodeIDType, n2 <- NodeIDType, x <- T ]]
     -- [[ popEmpty <- getTop.t.Null | t <- ThreadID ]]

alphaWD = Union({
  {| CASTop.t.n1.n2.true | t <- ThreadID, n1 <- NodeIDType, n2 <- NodeIDType |},
  {| getTop.t.Null | t <- ThreadID |},
  { error }
})

-- -- Version with renaming applied directly

-- WD0' =
--   CASTop?_?_?_!true.PushOp.A -> WD0'
--   [] CASTop?_?_?_!true.PushOp.B -> WD1'
--   [] CASTop?_?_?_!true.PopOp?x -> (if x==A then WD0' else WDErr)
--   [] getTop?_!Null -> WD0'

-- WD1' =
--   CASTop?_?_?_!true.PushOp.C -> WD1'
--   [] CASTop?_?_?_!true.PopOp?x ->
--        (if x==A then WDErr else if x==B then WD2' else WD1')
--   [] getTop?_!Null -> WDErr
  
-- WD2' =
--   CASTop?_?_?_!true.PushOp.A -> WD2'
--   [] CASTop?_?_?_!true.PopOp?x -> (if x==A then WD2' else WDErr)
--   [] getTop?_!Null -> WD2'

-- WatchDog' = WD0'

-- assert WatchDog [T= WatchDog'

-- assert WatchDog' [T= WatchDog


-------- All the Servers

ServerSet :: <(Proc, <(Event,Event)>, {Event}, Bool)>
ServerSet =  < 
  (Top, <>, alphaTop, false),
  (WD0, seq(WDRename), alphaWD, false)
>

Servers = 
  || (S, R_, Alpha, _) <- set(ServerSet) @
        [Alpha] S[[ e1 <- e2 | (e1,e2) <- set(R_) ]]

-------- Complete system


AllComponents = 
  let sync = Union({
    {|initNode,getValue,getNext,setNext|},
    {| CASTop.t.top.n.true | t <- ThreadID, top <- NodeIDType, n <- NodeID |}
  })
  within  AllThreads [| sync |] AllNodes

syncSet = union(alphaTop, diff(alphaWD, {error}))

System = AllComponents [| syncSet |] Servers

assert System :[deadlock free]


assert STOP [T= System \ diff(Events, {error})

assert STOP [T= STOP  :[symmetry reduce]:


